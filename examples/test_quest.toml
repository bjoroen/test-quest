[setup]
base_url = "http://localhost:6969"
command = "cargo"
args = ["r", "-p", "test_app"]
ready_when = "/health"
database_url_env = "DATABASE_URL"

[db]
db_type = "postgres"
migration_dir = "./utils/test_app/migrations"
image_ref = { name = "postgis/postgis", tag = "15-3.5-alpine" }

[global]
headers = { Authorization = "api-key 1234-1234-1234-1234" }

# --------------------
# Group 1: Auth tests
# --------------------
[[test_groups]]
name = "auth"

[test_groups.before_group]
reset = true
run_sql = ["""INSERT INTO users (id, name, password) VALUES
    (1, 'Alice', '123'),
    (2, 'Harry Potter', '1234'),
    (3, 'Charlie', '4321')
ON CONFLICT (id) DO NOTHING;"""]

[[test_groups.tests]]
name = "LoginUser"
method = "POST"
url = "/login"
query = "?hello=world&world=hello"
headers = { Authorization = "api-key 234-1234-1234-1234" }
body = { username = "Harry Potter", password = "1234" }
assert_status = 200
assert_headers = { Content-Type = "application/json" }

[[test_groups.tests]]
name = "ChangeUserPassword"
method = "PATCH"
url = "/login/password/change"
body = { username = "Harry Potter", password = "123123" }
assert_status = 200
assert_headers = { Content-Length = "1" }
assert_sql = { query = "SELECT password FROM users WHERE name = 'Harry Potter';", expect = "123123" }

[[test_groups.tests]]
name = "ChangeUserPasswordFail"
method = "PATCH"
url = "/login/password/change"
body = { username = "Harry Potter", password = "123123" }
assert_status = 200
assert_headers = { Content-Length = "0" }
assert_sql = { query = "SELECT password FROM users WHERE name = 'Harry Potter';", expect = "1223" }

[[test_groups.tests]]
name = "LogoutUser"
method = "POST"
url = "/logout"
assert_status = 200

# --------------------
# Group 2: User tests
# --------------------
[[test_groups]]
name = "users"

[test_groups.before_group]
reset = true
run_sql = ["""INSERT INTO users (id, name, password) VALUES
    (1, 'Alice', '123'),
    (2, 'Harry Potter', '1234'),
    (3, 'Charlie', '4321')
ON CONFLICT (id) DO NOTHING;"""]

[[test_groups.tests]]
name = "DeleteUser"
method = "DELETE"
url = "/users/1"
assert_status = 200
assert_json = { id = 1, name = "Alice", password = "23" }

[[test_groups.tests]]
before_run = [
  "INSERT INTO users (id, name, password) VALUES (1, 'Alice', '123') ON CONFLICT (id) DO NOTHING;",
]
name = "GetUser"
method = "GET"
url = "/users/1"
assert_status = 200

[[test_groups.tests]]
name = "CreateUser"
method = "POST"
url = "/users"
body = { name = "Bob" }
assert_status = 201
